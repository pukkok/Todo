인증(authentication) & 인가 (authorization)

인증?
(회원가입 , 로그인)
    ↓
    ↓ 식별자를 브라우저로 전송
    ↓
인가?
(사이트의 특정기능을 사용할 권한이 있는지)

암호화(키와 데이터로 숨김) < = > 복호화
2(key) car(data) 암호화 => arc(암호화 된 값)
arc 복호화 => 2car // 대칭키 암호화 알고리즘
암호화와 복호화에 동일한 키를 사용
JWT(JSON WEB TOKEN) = 대칭키, 비대칭키 둘다 가능


1.
브라우저 => 회원가입 요청 => 사용자정보 전송 => 서버

2.
서버 => 사용자정보 + 비밀키 => JWT 토큰 생성 => JWT 토큰 전송 => 브라우저

3.
브라우저 = JWT 토큰 저장(로컬스토리지, 쿠키)
- 로컬스토리지 = 용량이 쿠키보다는 크다
- 쿠키 저장시 장점 = 따로 토큰을 추가하지 않아도 요청 할 때 마다 쿠키데이터가 함께 전송
- 쿠키의 단점 = 용량 제한

4.
브라우저 = 서버 요청시 JWT 토큰을 포함해서 서버로 전송

5.
서버 = 복호화
JWT 토큰 + 비밀키 => 사용자 정보

6.
사용자 정보 확인후 권한이 있다면 실행, 없다면 막기(응답 돌려보냄)


세션 방식

브라우저 => 로그인 => 서버 => 해당 사용자의 세션id값 생성 => 
DB => 세션DB => 로그인한 사용자 정보 저장 + 세션ID값 => 브라우저